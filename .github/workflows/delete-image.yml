name: Delete Packer Image

on:
  repository_dispatch:
    types: [delete-image]

permissions:
  id-token: write # Required to fetch the OIDC token for AWS authentication.
  contents: read  # Required for actions/checkout.

jobs:
  delete:
    runs-on: ubuntu-latest
    steps:
      - name: 'Debug: Show Webhook Payload'
        run: |
          echo "Deleting image: ${{ github.event.client_payload.image_name }}"
          echo "Platform: ${{ github.event.client_payload.platform }}"

      # --- GCP Deletion ---
      - name: Authenticate to Google Cloud
        if: github.event.client_payload.platform == 'gcp'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS }}'
      
      - name: Delete GCP Image
        if: github.event.client_payload.platform == 'gcp'
        run: |
          gcloud compute images delete ${{ github.event.client_payload.image_name }} --project=${{ github.event.client_payload.project_id }} --quiet

      # --- AWS Deletion ---
      - name: Configure AWS Credentials
        if: github.event.client_payload.platform == 'aws'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ github.event.client_payload.aws_role_arn }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.client_payload.region || 'us-east-1' }}

      - name: Find and Delete AWS AMI
        if: github.event.client_payload.platform == 'aws'
        run: |
          AMI_NAME="${{ github.event.client_payload.image_name }}"
          echo "Finding AMI with name: $AMI_NAME"
          
          AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=$AMI_NAME" --query 'Images[0].ImageId' --output text)
          
          if [ -z "$AMI_ID" ] || [ "$AMI_ID" == "None" ]; then
            echo "AMI with name '$AMI_NAME' not found. It might have been deleted already."
            exit 0
          fi
          
          echo "Found AMI ID: $AMI_ID. Deregistering..."
          aws ec2 deregister-image --image-id $AMI_ID
          
          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --query 'Images[0].BlockDeviceMappings[0].Ebs.SnapshotId' --output text)
          if [ -n "$SNAPSHOT_ID" ] && [ "$SNAPSHOT_ID" != "None" ]; then
            echo "Deleting associated snapshot ID: $SNAPSHOT_ID"
            aws ec2 delete-snapshot --snapshot-id $SNAPSHOT_ID
          else
            echo "Could not find associated snapshot."
          fi
          echo "AMI deregistration and snapshot deletion process initiated."


      # --- Azure Deletion ---
      - name: Azure Login
        if: github.event.client_payload.platform == 'azure'
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

      - name: Delete Azure Image
        if: github.event.client_payload.platform == 'azure'
        run: |
          az image delete --resource-group ${{ github.event.client_payload.resource_group }} --name ${{ github.event.client_payload.image_name }} --yes
